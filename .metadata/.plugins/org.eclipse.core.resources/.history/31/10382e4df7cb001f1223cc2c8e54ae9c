package chapter03;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

public class C_Package2 {

	public static void main(String[] args) {
		
		//Collection Framework : Java에서 데이터 구조에 대한 표준화된 기법을 제공
		
		//List : 데이터를 저장할 때 중복을 허용하고 순서가 존재하는 데이터 구조
		//Collection Framework에서 데이터 타입을 지정할 땐 제너릭을 사용하여 지정, 참조형 데이터 타입만 지정 가능
		List<Integer> list;
		
		//ArrayList 구현 클래스 : 인덱스를 이용한 작업을 수행할 떄 유리
		list = new ArrayList<>();
		//LinkedList 구현 클래스 : 데이터 추가, 삭제 작업을 수행할 때 유리
		list = new LinkedList<>();
		
		//add(): List에 요소를 추가
		//추가할 요소는 ㅈ너릭으로 지정한 데이터 타입의 요소이어야 함
		list.add(10);
		//list.add("10");
		System.out.println(list);
		
		list.add(20);
		System.out.println(list);
		
		//get(): List의 특정 인덱스 요소를 가져옴
		//List의 인덱스 범위를 초과하지 않도록 주의
		//기본형 데이터 타입의 변수로 리스트의 요소를 받을 땐 null이 올 수 있음을 주의
		
		//set(): List의 특정 인덱스 요소를 변경
		//List 인덱스의 범위를 벗어난 인덱스를 지정할 수 없음
		list.set(1, -20);
		System.out.println(list);
		
		//remove(): List의 특정 인덱스 요소를 제거
		list.remove(0);
		System.out.println(list);
		
		List<String> fruits = new ArrayList<>();
		fruits.add("사과");
		fruits.add("바나나");
		fruits.add("카카오");
		System.out.println(fruits);
		
		fruits.remove("바나나");
		System.out.println(fruits);
		
		fruits.set(0, "오렌지");
		System.out.println(fruits);
		
		//size(): List의 크기를 반환
		System.out.println(list.size());
		
		//int[][] -> List<List<Integer>>
		
		//Set: 데이터를 저장할 때 중복을 허용하지 않고 순서가 존재하지 않는 데이터 구조
		Set<String> set;
		
		//HashSet 구현 클래스: 검색이 빠름
		set = new HashSet<String>();
		//TreeSet 구현 클래스: 요소를 정렬해서 추가
		set = new TreeSet<String>();
		
		//add(): Set에 요소를 추가
		//List와 다르게 동일한 요소가 있다면 추가하지 않음
		set.add("banana");
		System.out.println(set);
		set.add("apple");
		System.out.println(set);
		set.add("banana");
		System.out.println(set);
		
		//contains(): Set에 특정 요소가 있는 지 확인
		System.out.println(set.contains("banana"));
		
		//remove(): Set에 특정 요소를 제거
		set.remove("banana");
		System.out.println(set);
		
		//List와 Set을 적절히 사용하면 List의 중복 제거 및 정렬을 손쉽게 수행할 수 있음
		list = new ArrayList<Integer>();
		list.add(1);
		list.add(1);
		list.add(2);
		list.add(4);
		list.add(4);
		System.out.println(list);
		
		Set<Integer> set2 = new HashSet<>(list);
		System.out.println(set2);
		list = new ArrayList<>(set2);
		System.out.println(list);
		
		//Map: key와 value가 한 쌍으로 이루어진 요소들의 집합
		//key는 중독 불가능, value는 중복 가능
		Map<String, String> map;
		
		//HashMap 구현 클래스: 검색 속도가 빠름
		map = new HashMap<>();
		//TreeMap 구현 클래스: key를 기준으로 정렬하여 저장
		map = new TreeMap<>();
		
		//put(): Map에 key와 value의 쌍을 추가
		map.put("Apple", "사과");
		System.out.println(map);
		map.put("banana", "바나나");
		System.out.println(map);
	}

}
