package chapter2;


//상속 : 객체지향 프로그래밍의 특성 중 하나
//원래 존재하던 클래스를 '확장'하여 재사용할 수 있도록 하는 것
//코드의 중복을 제거하여 코드 재사용성, 유지보수성, 확장성을 높일 수 있음
//extends 키워드를 사용

//class SubClass extends SuperClass
class Human {
	String name;
	int age;
	
	Human() {}
	
	//부모 클래스의 생성자는 상속되지 않음
	Human(String name, int age) {
		this.name = name;
	}
	
	void sleep() {
		System.out.println(name + "이 잠을 잔다");
	}
}

class Korean extends Human {
	static String country = "대한민국";
	
	void sleep() {
		System.out.println("01시에 잠을 잔다");
	}
}

//Java는 단일 상속만 지원함
//다중 상속에 발생할 수 있는 다이아몬드 문제가 발생하지 않도록 하기 위함
//다이아몬드 문제 : 다중 상속으로 인해 동일한 이름의 메서드를 상속받은 상태에서 어떤 메서드를 선택해야 할지 모호해지는 문제
//인터페이스를 사용해서 다중 상속 효과를 볼 수 있음. 중첩 상속을 사용하여 다중 상속 효과를 볼 수 있음
class Firefighter extends Human/*, Korean*/ {
	//String name;
	//int age;
	
	//Human 클래스에서 상속받은 sleep 메서드를 오버로딩한 것
	void sleep(int time) {
		System.out.println(name + "이 " + time + "시에 잠을 잔다");
	}
	 
	void firefight() {
		System.out.println("소방활동을 한다");
	}
}

class Police extends Human {
	String rank;
	
	void patrol() {
		System.out.println("순찰을 돈다");
	}
}

public class E_Inheritance {

	public static void main(String[] args) {
		
		Firefighter firefighter = new Firefighter();
		firefighter.name = "왕건";
		System.out.println(firefighter.name);
		
		Police police = new Police();
		police.age = 35;
		System.out.println(police.age);

	}

}
